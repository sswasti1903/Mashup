# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PTKmNi1r2M4lUJG1Q56vdpWQBrzdPu8Y
"""

#pip install pytube moviepy

import sys
import os
from pytube import YouTube
from pytube import Search
from moviepy.editor import VideoFileClip, concatenate_audioclips, AudioFileClip
from youtube_search import YoutubeSearch

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def download_videos(singer_name, num):
    print(f"Downloading {num} videos of {singer_name}...")
    results = YoutubeSearch(f"{singer_name} songs", max_results=num).to_dict()
    create_directory('videos')
    for i in range(num):
        url = "https://www.youtube.com" + results[i]['url_suffix']
        try:
            yt = YouTube(url)
            video = yt.streams.filter(only_audio=True).first()
            video.download(output_path='videos',filename=f'video_{i}.mp4')
        except Exception as e:
            print(f"Error downloading video: {e}")


def convert_to_audio(num):

    create_directory('audios')
    for i in range(num):
        try:
            audio_path = f'audios/audio_{i}.mp3'
            video_path = f'videos/video_{i}.mp4'
            video_clip=AudioFileClip(video_path)
            video_clip.write_audiofile(audio_path)
            video_clip.close()
        except Exception as e:
            print(f"Error converting video to audio: {e}")


def cut_audio(duration):
    cut_files = []
    for i in range(num):
        try:
            audio_path = f'audios/audio_{i}.mp3'
            audio_clip = AudioFileClip(audio_path)
            cut_clip = audio_clip.subclip(0, duration)
            cut_file = audio_path.replace(".mp3", "-cut.mp3")
            cut_clip.write_audiofile(cut_file)
            cut_files.append(cut_file)
        except Exception as e:
            print(f"Error cutting audio: {e}")

    return cut_files

def merge_audios(audio_files, output_file):
    if not audio_files:
        print("No audio files to merge.")
        return

    try:
        audio_clips = [AudioFileClip(file) for file in audio_files]
        final_clip = concatenate_audioclips(audio_clips)
        final_clip.write_audiofile(output_file)
        print(f"Merged audios saved as {output_file}")
    except Exception as e:
        print(f"Error merging audios: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python <program.py> <SingerName> <NumberOfVideos> <AudioDuration> <OutputFileName>")
        sys.exit(1)

    singer_name = sys.argv[1]
    num = int(sys.argv[2])
    audio_duration = int(sys.argv[3])
    output_file = sys.argv[4]

    if num <=10:
        print("Number of videos must be greater than 10")
        sys.exit(1)

    if audio_duration <=20:
        print("Audio duration must be greater than 20 seconds")
        sys.exit(1)

    download_videos(singer_name, num)
    convert_to_audio(num)
    cut_files = cut_audio(audio_duration)
    merge_audios(cut_files, output_file)